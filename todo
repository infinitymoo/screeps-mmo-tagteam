// Behaviours i need to understand to make this code work in new games


room names are hardcoded right now, need to find an easy way to remember/know this, but initialized state machine might be answer
Dealing with raiders in remote rooms seem manual with manual attacker creep spawn command, need to automate this but have no intel/alert code
https://github.com/NesCafe62/screeps-pathfinding

/**
 * Base Development Code Goals
 * 1 - Spawn Container, extension placement, and fast-filler code
 * 2 - S
 */

/** LIMITATIONS **/
= High Priority =
1 - Change tracking of Object Of Omportance
	1.1 - intelDB {
			roomName[] : {
				survey: {
					poi: [{type:string, //sourcekeeper lair, energysource, powerbank, commodity, mineral etc.
								id:string,
								timer:number,
								timestamp:number,
								x:number,
								y:number}],
					linkedRooms[]: {
						direction:number,
						roomName:string
					}
				},
				activity: {
					timestamp:number,
					threatLevel:number,
					owner:string,
					hostileStructures:[Structure],
					hostileCreeps:[Creep],
					scavengeTargets[]: {
						type:string, //tombstone,dropped resource,ruin, etc
						expiryTick:number, //calculated upon population of gameticks+tickstolive
						id:string,
						x:number,
						y:number
					}
				}
			}
		}


3 - Sorting of spawn queue with new additions e.g. When harvesters die, i must prioritize the one with the closest to base to be respawned next, not just any one.

4 - Targetlock with x and y and room so that i can move to position even if no vision. can check harvesters alive through Game.creeps to clear transport target

- Event , broadcast, subscribe to reduce find, decision checks, etc. e.g. let remote harvest transports finish dropped energy pile from harvester, or
register invader tomb for scavenge, or call for help or some goal to initiate, or some creep to do something when another braodcasts the right thing. e.g. process newly
discovered remote source, check if should harvest, and kick off goal/task.

= State Machine Priority =
- Change Harvester source attribute to target to make task state machine generic
- Everything must be in pure functions
- Don't call variables in memory directly from roles etc. but rather implement statemachine that can ensure they're initialized and valid before being accessed.

= Tactical Priority =
- Creeps get stuck on room borders when there's logic in their code that makes them NOT move current tick if they're not at target, e.g. intermittent repairing
- Automatic handling of raiders in remote rooms and prioritizing spawning of attacker to deal with it first
- Basic Defense of main room
	. No prioritized tower filler code, can easily empty
	. Rampart Defense Code
	. No sensitivity to real base siege or remote harvest harass, creep just all respawn - can dry myself
	. No Signals to avoid invader npcs in remotes or kill with defender creep that can measure and handle them while civilians wait
- Keeper Room Farming
	. Spawn Combat Creep to kill Source Keepers effectively
	. Calculate Keeper respawns and evade them while having combat creep present effectively
	. Mineral Mining

- Reserve workspace spots, incl renew spot at spawner and avoid moving there
- Reserve areas for certain kinds of creep e.g. refillers so that builders don't clog paths.

= Low Priority =
- cache roads in remote harvesting rooms to easily rebuild if lost for some reason.
- baseLink automatic setting (near spawn) creep.room.memory.baseLink - currently is manual
- baseCommon - preserver.decayAudit & sustainRepair mission Need to calculate how much decay happens in a room so i can calculate how much repairer work I can do
- Tiered behaviour for roles / tasks depending on base development levels and/or creep size levels and/or target areas e.g. upgrader links
- inter-shard-ready code e.g. creep naming generation s[shard#]c[tick]i[random]
- use game constants to calculate things so that code is compatible between worlds
- inter-shard friendly code

// IDEAS
// calculator util to optimize planning and decision-making of objects and actions in the game

swarmlink system - swarmlink behaviours for different situations, starting with transporter linking
- swarmlink uses game.creep[].pos knowledge to find linkable creeps then groups creeps with same goals to determine which links to make that tick and then e.g. bucket energy
- different situations like remote harvesting, energy transmission swarm for upgrader or builder fueling or base filling
- must implement room position reservation system e.g. spawn exit, static refiller station, container delivery station, restricted areas that swarms wont clog
- combat utility, dynamic formations, surrounding, focus fire targets,

warden system - each room has warden object that links like network to base through each other and keeps logic for handling threats and intel
- remembering hostile position when blinded
- scout logic to expand warden network
- reserve logic for remote rooms
- preserve logic for creep flight and renewal
- maintenance logic for roads etc
- base defense logic for owned rooms eg rampart and wall maintenance, towers logic

// base building logic
// - must leave space around edges of base to move because things can get stuck if structures are adjacent to mountains
// - 







******************** TASKS
Task Parms Standard (availableCreep, target {type,id,rate}, targetRoomPosition, priority)
TASK_TRAVEL_TARGET (taskParms, taskParms.custom.travelOptions)
 - dependencies:
 	STATE_ROOM_PEACEFUL
	AVAILABLE_CREEP

 - states:
	FINISHED //completed task
	ACTIVE //successful harvest action
	COOLDOWN //fatigue or stuck wait
	FAIL //no move parts or room not peaceful

TASK_HARVEST_RESOURCE (taskParms)
 - preferences:
	DESIGN_STATIC

 - dependencies:
	ROOM_VISIBLE
	HAS_CAPACITY
 	STATE_ROOM_PEACEFUL
	AVAILABLE_CREEP
	- BODYPART_WORK

 - states:
	ACTIVE //successful harvest action
	COOLDOWN //regen or mineral extractor cooldowns
	FAIL //some resources can finish e.g. commodities

TASK_EMPTY_STORE

 
TASK_FETCH_RESOURCE (taskParms, taskParms.custom.threshold)

 - dependencies:
 	STATE_ROOM_PEACEFUL
	AVAILABLE_CREEP
	!DESIGN_STATIC

TASK_SUPPLY_RESOURCE (taskParms)
 - dependencies:
	AVAILABLE_CREEP
	- BODYPART_WORK

TASK_BUILD_STRUCTURE
 - dependencies:

TASK_REPAIR_STRUCTURE (taskParms, taskParms.custom.threshold)

TASK_SPAWN_CREEP (class,role,goal)




threshold {
	attSubject: thisCreep | target //e.g. creep.attName=store.attFunc=getUsedCapacity(attFuncParms=RESOURCE_ENERGY)
	attFunc?: functionName
	attFuncParms?: functionParms
	attName?: string
	attValue: any
	attOperator : string ("==","<=",">=","<",">")
}